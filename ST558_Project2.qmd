---
title: "ST 558 Project 2"
subtitle: "Lee Worthington"
format: 
  html:
    embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Setup environment

```{r}
#| warning: FALSE
#| message: FALSE

library(readr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tools)
library(httr)
library(jsonlite)
library(magrittr)
library(purrr)


# API list
  # https://github.com/public-apis/public-apis?tab=readme-ov-file#business
# good ones?
  # https://fiscaldata.treasury.gov/api-documentation/
  # this is "fed treasury" in the api list


```

## API query function (see hw4 for example)

```{r}
#| warning: FALSE
#| message: FALSE

# define funciton with 6 filter options
get_revenue_collections_data <- function(record_date = NULL, electronic_category_desc = NULL, channel_type_desc = NULL, tax_category_desc = NULL, 
                                         record_fiscal_year = NULL, record_calendar_year = NULL, record_calendar_month = NULL, 
                                         format = "json"){
  
  # set base url and endpoint
  base_url <- 'https://api.fiscaldata.treasury.gov/services/api/fiscal_service/'
  end_point <- 'v2/revenue/rcm'
  full_url <- paste0(base_url, end_point)
  
  # function to put the filters in a string format the api expects
  build_filter <- function(field, value) {
    if (!is.null(value)) {
      return(paste0(field, ":eq:", value))
    }
    return(NULL)
  }
  
  # create query parameters
  query_params <- list(
    build_filter("record_date", record_date),
    build_filter("electronic_category_desc", electronic_category_desc),
    build_filter("channel_type_desc", channel_type_desc),
    build_filter("tax_category_desc", tax_category_desc),
    build_filter("record_fiscal_year", record_fiscal_year),
    build_filter("record_calendar_year", record_calendar_year),
    build_filter("record_calendar_month", record_calendar_month),
    format = format
  )
  
  # remove NULL values from query
  query_params <- compact(query_params)
  
  # Combine the filters into a single string if there are multiple filters
  if (length(query_params) > 1) {
    query_params$filter <- paste(query_params[-length(query_params)], collapse = ",")
    query_params <- list(filter = query_params$filter, format = query_params$format)
  }
  
  # get the data from the API
  url_data <- httr::GET(full_url, query = query_params)
  
  #  response check
  if (status_code(url_data) != 200) {
    stop("Failed to retrieve data: ", status_code(url_data), " - ", content(url_data, "text"))
  }
  
  # parse data s tibble
  data <- url_data %>%
    httr::content(as = "text") %>%
    fromJSON(flatten = TRUE, simplifyDataFrame = TRUE) %>%
    pluck("data") %>%
    as_tibble()
  
  # return the results
  return(data)
}

# testing @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
revenue_data <- get_revenue_collections_data(
  record_date = NULL,
  electronic_category_desc = "Fully Electronic - All",
  channel_type_desc = NULL,
  tax_category_desc = NULL,
  record_fiscal_year = 2020,
  record_calendar_year = NULL,
  record_calendar_month = NULL
)
print(revenue_data)

```



















