[
  {
    "objectID": "ST558_Project2.html",
    "href": "ST558_Project2.html",
    "title": "ST558 Project 2",
    "section": "",
    "text": "library(readr)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tools)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(magrittr)\nlibrary(purrr)\n\n\n# API list\n  # https://github.com/public-apis/public-apis?tab=readme-ov-file#business\n# good ones?\n  # https://fiscaldata.treasury.gov/api-documentation/\n  # this is \"fed treasury\" in the api list\n# using this data @@@@@@@@@\n  # https://fiscaldata.treasury.gov/datasets/revenue-collections-management/u-s-government-revenue-collections"
  },
  {
    "objectID": "ST558_Project2.html#api-query-function-see-hw4-for-example",
    "href": "ST558_Project2.html#api-query-function-see-hw4-for-example",
    "title": "ST558 Project 2",
    "section": "1 API query function (see hw4 for example)",
    "text": "1 API query function (see hw4 for example)\n\n# define funciton with 6 filter options\nget_revenue_collections_data <- function(record_date = NULL, electronic_category_desc = NULL, channel_type_desc = NULL, tax_category_desc = NULL, \n                                         record_fiscal_year = NULL, record_calendar_year = NULL, record_calendar_month = NULL, \n                                         format = \"json\", page_number = 1, page_size = 1000){\n  \n  # set base url and endpoint\n  base_url <- 'https://api.fiscaldata.treasury.gov/services/api/fiscal_service/'\n  end_point <- 'v2/revenue/rcm'\n  full_url <- paste0(base_url, end_point)\n  \n  # function to put the filters in a string format the api expects\n  build_filter <- function(field, value) {\n    if (!is.null(value)) {\n      return(paste0(field, \":eq:\", value))\n    }\n    return(NULL)\n  }\n  \n  # create query parameters\n  query_params <- list(\n    build_filter(\"record_date\", record_date),\n    build_filter(\"electronic_category_desc\", electronic_category_desc),\n    build_filter(\"channel_type_desc\", channel_type_desc),\n    build_filter(\"tax_category_desc\", tax_category_desc),\n    build_filter(\"record_fiscal_year\", record_fiscal_year),\n    build_filter(\"record_calendar_year\", record_calendar_year),\n    build_filter(\"record_calendar_month\", record_calendar_month),\n    `page[number]` = page_number,\n    `page[size]` = page_size,\n    format = format\n  )\n  \n  # remove NULL values from query\n  query_params <- compact(query_params)\n  \n  # combine the filters into a single string if there are multiple filters\n  if (length(query_params) > 1) {\n    query_params$filter <- paste(query_params[-length(query_params)], collapse = \",\")\n    query_params <- list(filter = query_params$filter, format = query_params$format, `page[number]` = page_number, `page[size]` = page_size)\n  }\n  \n  # get the data from the API\n  url_data <- httr::GET(full_url, query = query_params)\n  \n  #  response check\n  if (status_code(url_data) != 200) {\n    stop(\"Failed to retrieve data: \", status_code(url_data), \" - \", content(url_data, \"text\"))\n  }\n  \n  # parse data s tibble\n  data <- url_data |>\n    httr::content(as = \"text\") |>\n    fromJSON(flatten = TRUE, simplifyDataFrame = TRUE) |>\n    pluck(\"data\") |>\n    as_tibble()\n  \n  # return the results\n  return(data)\n}\n\n# testing @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nrevenue_data <- get_revenue_collections_data(\n  record_date = NULL,\n  electronic_category_desc = NULL, #\"Fully Electronic - All\",\n  channel_type_desc = NULL,\n  tax_category_desc = NULL,\n  record_fiscal_year = NULL,\n  record_calendar_year = 2024,\n  record_calendar_month = NULL,\n  page_number = 1, \n  page_size = 10000\n)\ndim(revenue_data)\n\n[1] 1882   15\n\nmin(revenue_data$record_date)\n\n[1] \"2024-01-02\"\n\nmax(revenue_data$record_date)\n\n[1] \"2024-07-03\""
  },
  {
    "objectID": "ST558_Project2.html#data-summary-functions",
    "href": "ST558_Project2.html#data-summary-functions",
    "title": "ST558 Project 2",
    "section": "2 Data summary functions",
    "text": "2 Data summary functions\n\nContingency table\n\n# contingency table\ncontingency_table <- revenue_data |>\n  group_by(channel_type_desc) |>\n  drop_na(channel_type_desc) |>\n  summarize(count = n())\n\n# show results\ncontingency_table \n\n# A tibble: 4 × 2\n  channel_type_desc      count\n  <chr>                  <int>\n1 Bank                     258\n2 Internet                 384\n3 Mail                     345\n4 Over-the-Counter (OTC)   895\n\n\n\n\nSummary statistics\n\n# get summary stats\nnumerical_summaries <- revenue_data |>\n  \n  # convert values to numeric\n  mutate(net_collections_amt = as.numeric(net_collections_amt)) |>\n  \n  # group by given field\n  group_by(tax_category_desc) |>\n  \n  # generate summary statistics\n  summarize(\n    value_total = sum(net_collections_amt, na.rm = TRUE),\n    value_avg = mean(net_collections_amt, na.rm = TRUE),\n    value_min = min(net_collections_amt, na.rm = TRUE),\n    value_25th = quantile(net_collections_amt, 0.25, na.rm = TRUE),\n    value_50th = median(net_collections_amt, na.rm = TRUE),\n    value_75th = quantile(net_collections_amt, 0.75, na.rm = TRUE),\n    value_100th = max(net_collections_amt, na.rm = TRUE)\n  )\n\n# show results\nprint(numerical_summaries) \n\n# A tibble: 3 × 8\n  tax_category_desc value_total   value_avg  value_min value_25th value_50th\n  <chr>                   <dbl>       <dbl>      <dbl>      <dbl>      <dbl>\n1 IRS Non-Tax           4.41e 7     147819.     -6103.     10319.     43153.\n2 IRS Tax               2.89e12 4757909899. -22161935.   8478259. 221138269.\n3 Non-Tax               4.01e11  411223356. -44519618.   9529825.  56833501.\n# ℹ 2 more variables: value_75th <dbl>, value_100th <dbl>\n\n\n\n\n4 plots\n\n# load library to format dollars\nlibrary(scales)\n\n# Convert to numeric for plots\nrevenue_data <- revenue_data |>\n  mutate(\n    net_collections_amt = as.numeric(net_collections_amt),\n    record_calendar_year = as.integer(record_calendar_year),\n    record_calendar_month = as.integer(record_calendar_month)\n  )\n\n# Extract date range and format as \"Month YYYY\"\ndate_range_year <- range(revenue_data$record_calendar_year, na.rm = TRUE)\ndate_range_month <- range(revenue_data$record_calendar_month, na.rm = TRUE)\nmin_date <- paste(month.name[date_range_month[1]], date_range_year[1])\nmax_date <- paste(month.name[date_range_month[2]], date_range_year[2])\ndate_range_text <- paste(min_date, \"to\", max_date)\n\n# Histogram\nggplot(revenue_data, aes(x = net_collections_amt)) +\n  geom_histogram(bins = 25, fill = \"lightgreen\", color = \"black\", alpha = 0.5) +\n  labs(title = paste(\"Histogram of Net Collections Amount between\", date_range_text), x = \"Net Collections Amount\", y = \"Count\") +\n  scale_x_log10(labels = dollar) +\n  theme_minimal()\n\n\n\n# Boxplot\nggplot(revenue_data, aes(x = tax_category_desc, y = net_collections_amt)) +\n  geom_boxplot(fill = \"lightgreen\", color = \"black\", alpha = 0.5) +\n  labs(title = paste(\"Distribution of Net Collections by Tax Category between\", date_range_text), x = \"Tax Category\", y = \"Net Collections Amount\") +\n  scale_y_log10(labels = dollar) +\n  theme_minimal()\n\n\n\n# Line plot by month\nggplot(revenue_data, aes(x = as.factor(record_calendar_month), y = net_collections_amt, color = tax_category_desc, group = tax_category_desc)) +\n  stat_summary(fun = sum, geom = \"line\") +\n  labs(title = paste(\"Net Collections by Month and Tax Category between\", date_range_text), x = \"Month\", y = \"Net Collections Amount\") +\n  scale_y_continuous(labels = dollar) +\n  theme_minimal()\n\n\n\n# Summarize data for heatmap\nheatmap_data <- revenue_data %>%\n  group_by(tax_category_desc, channel_type_desc) %>%\n  summarize(total_net_collections = sum(net_collections_amt, na.rm = TRUE), .groups = \"drop\")\n\n# Heatmap\nggplot(heatmap_data, aes(x = tax_category_desc, y = channel_type_desc, fill = total_net_collections)) +\n  geom_tile(alpha = 0.5) +\n  geom_text(aes(label = scales::dollar(total_net_collections)), color = \"black\", size = 3) +\n  labs(title = paste(\"Heatmap of Tax Category by Channel Type between\", date_range_text), x = \"Tax Category\", y = \"Channel Type\", fill = \"Total Net Collections\") +\n  scale_fill_gradient(low = \"lightgreen\", high = \"darkgreen\", labels = dollar) +\n  theme_minimal()"
  }
]